# kind: PersistentVolume
# apiVersion: v1
# metadata:
#   name: jenkins
#   labels:
#     type: local
# spec:
#   capacity:
#     storage: 2Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/data/jenkins/"

# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: jenkins-claim
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 2Gi
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: jenkins
#   labels:
#     app: jenkins
# spec:
#   ports:
#     - port: 80
#       targetPort: 8080
#   selector:
#     app: jenkins
#     tier: jenkins
#   type: NodePort
# ---
# apiVersion: extensions/v1beta1
# kind: Deployment
# metadata:
#   name: jenkins
#   labels:
#     app: jenkins
# spec:
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       labels:
#         app: jenkins
#         tier: jenkins
#     spec:
#       containers:
#       - image: chadmoon/jenkins-docker-kubectl:latest
#         name: jenkins
#         securityContext:
#           privileged: true
#         ports:
#         - containerPort: 8080
#           name: jenkins
#         volumeMounts:
#         - name: jenkins-persistent-storage
#           mountPath: /root/.jenkins
#         - name: docker
#           mountPath: /var/run/docker.sock
#       volumes:
#       - name: docker
#         hostPath:
#           path: /var/run/docker.sock
#       - name: jenkins-persistent-storage
#         persistentVolumeClaim:
#           claimName: jenkins-claim

# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
# namespace: default
# name: jenkins-role
# rules:
#   - apiGroups: [""]
#     resources: ["persistentvolumeclaims"]
#     verbs: ["get", "watch", "list"]
#   - apiGroups: [""]
#     resources: ["services"]
#     verbs: ["get", "watch", "list"]
#   - apiGroups: ["apps"]
#     resources: ["deployments"]
#     verbs: ["*"]



# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
# name: jenkins-rolebinding
# namespace: default
# subjects:
#   - kind: ServiceAccount
#     name: default
#     namespace: default
# roleRef:
# kind: Role
# name: jenkins-role
# apiGroup: rbac.authorization.k8s.io
# /////////////////////////////////////
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: deployment-reader
# rules:
# - apiGroups: ["apps"]
#   resources: ["deployments"]
#   verbs: ["get", "list", "watch"]

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: deployment-reader-binding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: deployment-reader
# subjects:
# - kind: ServiceAccount
#   name: default
#   namespace: default

# kind: PersistentVolume
# apiVersion: v1
# metadata:
#   name: jenkins
#   labels:
#     type: local
# spec:
#   capacity:
#     storage: 2Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/data/jenkins/"

# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: jenkins-claim
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 2Gi

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: jenkins
#   labels:
#     app: jenkins
# spec:
#   ports:
#     - port: 80
#       targetPort: 8080
#   selector:
#     app: jenkins
#     tier: jenkins
#   type: NodePort

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: jenkins
#   labels:
#     app: jenkins
# spec:
#   selector:
#     matchLabels:
#       app: jenkins
#       tier: jenkins
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         app: jenkins
#         tier: jenkins
#     spec:
#       containers:
#       - name: jenkins
#         image: 127.0.0.1:30400/jenkins:lastest

#         imagePullPolicy: Always
#         ports:
#         - containerPort: 8080
#           name: jenkins
#         volumeMounts:
#         - name: jenkins-persistent-storage
#           mountPath: /var/jenkins_home
#         - name: docker-sock
#           mountPath: /var/run/docker.sock
#       volumes:
#       - name: jenkins-persistent-storage
#         persistentVolumeClaim:
#           claimName: jenkins-claim
#       - name: docker-sock
#         hostPath:
#           path: /var/run/docker.sock
#       - name: jenkins-plugins
#         configMap:
#           name: jenkins-plugins


# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: deployment-reader
# rules:
# - apiGroups: ["apps"]
#   resources: ["deployments"]
#   verbs: ["get", "list", "watch"]

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: deployment-reader-binding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: deployment-reader
# subjects:
# - kind: ServiceAccount
#   name: default
#   namespace: default

# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: jenkins
#   labels:
#     type: local
# spec:
#   capacity:
#     storage: 2Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/data/jenkins/"

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: jenkins-claim
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 2Gi

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: jenkins
#   labels:
#     app: jenkins
# spec:
#   ports:
#     - port: 80
#       targetPort: 8080
#   selector:
#     app: jenkins
#     tier: jenkins
#   type: NodePort

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: jenkins
#   labels:
#     app: jenkins
# spec:
#   selector:
#     matchLabels:
#       app: jenkins
#       tier: jenkins
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         app: jenkins
#         tier: jenkins
#     spec:
#       containers:
#       - name: jenkins
#         image: 127.0.0.1:30400/jenkins:lastest
#         imagePullPolicy: Always
#         ports:
#         - containerPort: 8080
#           name: jenkins
#         volumeMounts:
#         - name: jenkins-persistent-storage
#           mountPath: /var/jenkins_home
#       volumes:
#       - name: jenkins-persistent-storage
#         persistentVolumeClaim:
#           claimName: jenkins-claim

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-patcher
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["patch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: service-patcher-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: service-patcher
subjects:
- kind: ServiceAccount
  name: default
  namespace: default



# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: deployment-reader
# rules:
# - apiGroups: ["apps"]
#   resources: ["deployments"]
#   verbs: ["get", "list", "watch"]

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: deployment-reader-binding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: deployment-reader
# subjects:
# - kind: ServiceAccount
#   name: default 
#   namespace: default

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins
  labels:
    type: local
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/jenkins/"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  ports:
    - port: 81
      targetPort: 8080
  selector:
    app: jenkins
    tier: jenkins
  # type: NodePort
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  selector:
    matchLabels:
      app: jenkins
      tier: jenkins
  replicas: 1
  template:
    metadata:
      labels:
        app: jenkins
        tier: jenkins
    spec:
      containers:
      - name: jenkins
        image: 127.0.0.1:30400/jenkins:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: jenkins
        volumeMounts:
        - name: jenkins-persistent-storage
          mountPath: /var/jenkins_home
        - name: docker-sock
          mountPath: /var/run/docker.sock
      volumes:
      - name: jenkins-persistent-storage
        persistentVolumeClaim:
          claimName: jenkins-claim
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
      # - name: jenkins-plugins
      #   configMap:
      #     name: jenkins-plugins



      #   volumeMounts:
      #   - name: jenkins-persistent-storage
      #     mountPath: /var/jenkins_home
      #   - name: docker-sock
      #     mountPath: /var/run/docker.sock
      # volumes:
      # - name: jenkins-persistent-storage
      #   persistentVolumeClaim:
      #     claimName: jenkins-claim
      # - name: docker-sock
      #   hostPath:
      #     path: /var/run/docker.sock
      # - name: jenkins-plugins
      #   configMap:
      #     name: jenkins-plugins